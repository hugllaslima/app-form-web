name: CI/CD Deploy Unificado

on:
  push:
    branches: [ main, stage ]
  pull_request:
    branches: [ main, stage ]
    types: [closed]

jobs:
  deploy-stage:
    name: Deploy Para Ambiente de Stage Local
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/stage') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'stage')
    runs-on: [self-hosted, stage-runner]
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Build da imagem Docker
        working-directory: ./src
        run: docker build -t app-form-web-stage .
        
      - name: Parar e remover container antigo
        run: |
          docker stop app-form-web-stage || true
          docker rm app-form-web-stage || true
          
      - name: Subir novo container de Stage
        run: |
          docker run -d --restart=always --name app-form-web-stage -p 8080:80 app-form-web-stage:latest
          
      - name: Cleanup imagens antigas
        run: docker image prune -f

  deploy-production:
    name: Deploy Para Ambiente de Producao AWS
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    runs-on: ubuntu-latest
    environment: app-form-web
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login no Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          
      - name: Build da imagem
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }} ./src
          
      - name: Tag da imagem para o ECR
        run: |
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:latest ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          
      - name: Enviar a Imagem para o Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          
      - name: Deploy na Instância EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            sudo docker login --username AWS --password $(aws ecr get-login-password --region $AWS_REGION) ${{ secrets.AWS_ECR_REGISTRY }}
            sudo docker pull ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
            sudo docker stop ${{ secrets.AWS_ECR_REPOSITORY }} || true
            sudo docker rm ${{ secrets.AWS_ECR_REPOSITORY }} || true
            sudo docker run -d --restart=always --name ${{ secrets.AWS_ECR_REPOSITORY }} -p 8080:80 ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest

