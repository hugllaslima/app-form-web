# üöÄ PIPELINE DE PRODU√á√ÉO - Deploy Para Ambiente de Producao AWS (ECR + EC2)
# Este workflow implementa o deploy automatizado para o ambiente de produ√ß√£o
# Utiliza AWS ECR para registry de imagens e EC2 para hospedagem da aplica√ß√£o

name: (CI/CD) Deploy Para Ambiente de Producao AWS (ECR + EC2)

# üìã TRIGGER: Define quando este workflow ser√° executado
# Executa apenas quando um Pull Request √© FECHADO (merged) na branch main
on:
  pull_request:
    branches: [ main ]        # Monitora PRs direcionados √† branch main
    types: [closed]           # S√≥ executa quando o PR √© fechado (merged ou closed)

jobs:
  # üèóÔ∏è JOB PRINCIPAL: Respons√°vel por todo o processo de deploy em produ√ß√£o
  deploy-production:
    # ‚ö†Ô∏è CONDI√á√ÉO DE SEGURAN√áA: Garante que s√≥ executa em cen√°rios espec√≠ficos
    # S√ì executa se for PR mergeado de stage para main (fluxo GitFlow)
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.head.ref == 'stage' &&
      github.event.pull_request.base.ref == 'main'
    
    runs-on: ubuntu-latest     # Executa em runner Ubuntu (GitHub-hosted)
    environment: app-form-web  # Usa environment para controle de secrets e aprova√ß√µes
    
    steps:
      # üîç STEP 1: Debug - Mostra informa√ß√µes do contexto para troubleshooting
      - name: Debug
        run: |
          echo "=== PRODUCTION DEPLOY ==="
          echo "Head: ${{ github.event.pull_request.head.ref }}"
          echo "Base: ${{ github.event.pull_request.base.ref }}"
          
      # üì• STEP 2: Checkout - Baixa o c√≥digo fonte do reposit√≥rio
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      # üîê STEP 3: Autentica√ß√£o AWS - Configura credenciais para acessar servi√ßos AWS
      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # üîë STEP 4: Login ECR - Autentica Docker com o Amazon ECR (registry de imagens)
      - name: Login no Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          
      # üèóÔ∏è STEP 5: Build - Constr√≥i a imagem Docker da aplica√ß√£o
      - name: Build da imagem
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }} ./src
          
      # üè∑Ô∏è STEP 6: Tag - Adiciona tag apropriada para o ECR (formato registry/repo:tag)
      - name: Tag da imagem para o ECR
        run: |
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }}:latest ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          
      # üì§ STEP 7: Push - Envia a imagem para o Amazon ECR
      - name: Enviar a Imagem para o Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          
      # üöÄ STEP 8: Deploy EC2 - Conecta via SSH na inst√¢ncia EC2 e atualiza a aplica√ß√£o
      - name: Deploy na Inst√¢ncia EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            # Login no ECR dentro da inst√¢ncia EC2
            sudo docker login --username AWS --password $(aws ecr get-login-password --region $AWS_REGION) ${{ secrets.AWS_ECR_REGISTRY }}
            # Baixa a nova vers√£o da imagem
            sudo docker pull ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
            # Para e remove o container antigo (|| true evita erro se n√£o existir)
            sudo docker stop ${{ secrets.AWS_ECR_REPOSITORY }} || true
            sudo docker rm ${{ secrets.AWS_ECR_REPOSITORY }} || true
            # Inicia o novo container com a vers√£o atualizada
            sudo docker run -d --restart=always --name ${{ secrets.AWS_ECR_REPOSITORY }} -p 8080:80 ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
